syntax="proto2";
package node;
option java_package="com.kongyt.node.messages";

// Master & Node 通信消息
enum MN_Msg{
	
    N2M_Node_Connect_Req	            = 0x00010001;
    M2N_Node_Connect_Res                = 0x00010002;

    N2M_Node_Disconn_Req                = 0x00010003;
    M2N_Node_Disconn_Res                = 0x00010004;

    N2M_Get_Node_List_Req               = 0x00010005;
    M2N_Get_Node_List_Res               = 0x00010006;

    N2M_Register_Element_Req            = 0x00010007;
    M2N_Register_Element_Res            = 0x00010008;

    N2M_Unregister_Element_Req          = 0x00010009;
    M2N_Unregister_Element_Res          = 0x0001000A;

    N2M_Query_Element_Req               = 0x0001000B;
    M2N_Query_Element_Res               = 0x0001000C;

}


message N2M_Request{    
    optional N2M_NodeConnectReq             nodeConnectReq              = 1;
    optional N2M_NodeDisconnReq             getNodeIdReq                = 2;
    optional N2M_GetNodeListReq             getNodeListReq              = 3;
    optional N2M_RegisterElementReq         registerElementReq          = 4;
    optional N2M_UnregisterElementReq       unregisterElementReq        = 5;
    optional N2M_QueryElementReq            queryElementReq             = 6;
}


message M2N_Response{
    optional bool                           result                      = 1;
    optional int32                          errorCode                   = 2;
    optional string                         errorStr                    = 3;
    optional M2N_NodeConnectRes             nodeConnectRes              = 4;
    optional M2N_NodeDisconnRes             nodeDisconnRes              = 5;
    optional M2N_GetNodeListRes             getNodeListRes              = 6;
    optional M2N_RegisterElementRes         registerElementRes          = 7;
    optional M2N_UnregisterElementRes       unregisterElementRes        = 8;
    optional M2N_QueryElementRes            queryElementRes             = 9;
}


message N2M_NodeConnectReq{    
    optional string         host    = 1;
    optional int32          port    = 2;
}


message M2N_NodeConnectRes{    
    optional int32          nodeId  = 1;
}


message N2M_NodeDisconnReq{
    // empty
}


message M2N_NodeDisconnRes{
    // empty
}


message M2N_NodeInfo{
    optional int32          nodeId      = 1;
    optional string         host        = 2;
    optional int32          port        = 3;
}


message N2M_GetNodeListReq{
    // empty
}


message M2N_GetNodeListRes{
    repeated M2N_NodeInfo   nodeInfos  = 1;
}


message N2M_RegisterElementReq{
    optional int32          nodeId      = 1;
    optional bool           isStatic    = 2;
    optional uint64         guid        = 3;
}


message M2N_RegisterElementRes{
    optional bool           isStatic    = 1;
    optional uint64         guid        = 2;
}


message N2M_UnregisterElementReq{
    optional uint64         guid        = 1;
}


message M2N_UnregisterElementRes{
    // empty
}


message N2M_QueryElementReq{
    optional uint64         guid        = 1;
}


message M2N_QueryElementRes{
    optional uint64         guid        = 1;
    optional int32          nodeId      = 2;
}

